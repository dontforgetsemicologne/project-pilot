generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User and Authentication Models
model User {
  id              String         @id @default(cuid())
  name            String?
  email           String         @unique
  emailVerified   DateTime?
  image           String?
  role            String         @default("USER")
  department      String?
  preferences     Json?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Auth relations
  accounts        Account[]
  sessions        Session[]
  authenticators  Authenticator[]

  // Project management relations
  assignedTasks   Task[]         @relation("AssignedTo")
  createdTasks    Task[]         @relation("CreatedBy")
  teamMemberships Team[]         @relation("TeamMembers")
  teamLeading     Team[]         @relation("TeamLead")
  comments        Comment[]
  projects        Project[]      @relation("ProjectMembers")
  ownedProjects   Project[]      @relation("ProjectOwner")

  @@index([email])
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
  @@index([identifier])
}

model Authenticator {
  id                    String  @id @default(cuid())
  credentialID          String  @unique
  userId                String
  providerAccountId     String
  credentialPublicKey   String
  counter               Int
  credentialDeviceType  String
  credentialBackedUp    Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Project Management Models
model Project {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  status      Status   @default(ACTIVE)
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String

  // Relations
  owner       User     @relation("ProjectOwner", fields: [ownerId], references: [id])
  members     User[]   @relation("ProjectMembers")
  teams       Team[] 
  tasks       Task[]

  @@index([ownerId])
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  leadId      String
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  lead        User     @relation("TeamLead", fields: [leadId], references: [id])
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  members     User[]   @relation("TeamMembers")
  tasks       Task[]

  @@index([leadId])
  @@index([projectId])
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?    @db.Text
  status      TaskStatus @default(PENDING)
  priority    Priority   @default(MEDIUM)
  startDate   DateTime?
  deadline    DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Foreign keys
  createdById String
  teamId      String
  projectId   String

  // Relations
  createdBy   User      @relation("CreatedBy", fields: [createdById], references: [id])
  team        Team      @relation(fields: [teamId], references: [id])
  project     Project   @relation(fields: [projectId], references: [id])
  assignees   User[]    @relation("AssignedTo")
  tags        Tag[]
  comments    Comment[]

  @@index([createdById])
  @@index([teamId])
  @@index([projectId])
}

model Tag {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tasks       Task[]

  @@index([name])
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  taskId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  task      Task     @relation(fields: [taskId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([taskId])
  @@index([userId])
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  REVIEW
  COMPLETED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Status {
  ACTIVE
  ON_HOLD
  COMPLETED
  ARCHIVED
}